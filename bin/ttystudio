#!/usr/bin/env node

/**
 * ttystudio - recorder and compiler for ttystudio
 * Copyright (c) 2015, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/ttystudio
 */

var fs = require('fs')
  , options = require('../lib/options');

/**
 * Compile
 */

function compile(options) {
  var SGRWriter = require('../lib/writer');

  var input = options.files[0]
    , output = options.o || options.output || options.files[1]
    , stream
    , frames
    , writer;

  if (output) {
    if (output === '-') {
      stream = process.stdout;
    } else {
      stream = fs.createWriteStream(output);
    }
  }

  options.stream = stream;
  options.delay = options.delay || 100;
  if (/\.png$/.test(output)) {
    options.png = true;
  }

  if (Array.isArray(input)) {
    frames = input;
  } else if (typeof input === 'string') {
    if (~input.indexOf('.json')) {
      log('parsing json');
      frames = JSON.parse(fs.readFileSync(input, 'utf8'));
    } else {
      log('reading file');
      frames = [fs.readFileSync(input, 'utf8')];
    }
  } else {
    throw new Error('No input given.');
  }

  if (options.range) {
    frames = frames.slice(options.range[0], options.range[1]);
  }

  log('initializing writer');
  writer = new SGRWriter(frames, options);

  log('writing image');
  writer.write();

  return stream;
}

/**
 * Record
 */

function record(options) {
  var recorder = require('../lib/record');

  return recorder(options, function(err, frames) {
    if (err) throw err;

    var output = options.files[0] || options.o || options.output
      , json = JSON.stringify(frames);

    if (!output) {
      throw new Error('No output file specified.');
    }

    if (~output.indexOf('.json')) {
      log('wrote frames to %s', output);
      fs.writeFileSync(output, json);
      return process.exit(0);
    }

    fs.writeFileSync(output.replace(/\.\w+$/, '') + '.frames.json', json);

    options.files = [frames, output];

    return compile(options).on('finish', function() {
      log('wrote image to %s', output);
      return process.exit(0);
    });
  });
}

/**
 * Play
 */

function play(options) {
  var player = require('../lib/play');

  return player(options, function(err) {
    if (err) throw err;
    return process.exit(0);
  });
}

/**
 * Main
 */

function main(options) {
  if (options.compile || (options.files.length === 2)) {
    return compile(options);
  }
  if (options.record) {
    return record(options);
  }
  if (options.play) {
    return play(options);
  }
  return record(options);
}

/**
 * Helpers
 */

function log() {
  if (!options.log) return;
  return console.error.apply(console, arguments);
}

/**
 * Expose
 */

if (!module.parent) {
  main(options);
} else {
  exports = main;
  exports.record = record;
  exports.compile = compile;
  module.exports = exports;
}
